# -*- coding: utf-8 -*-
"""Gastos com Cartão Corporativo da Presidência da República.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_uXbnO01Yk7cqLMLzpxJTZkp7xET2CYL

# **Gastos do Cartão Corporativo da Presidência da República**

## Comparação entre os presidentes atualizado pela inflação atual.

### Período de análise: Janeiro de 2003 a Novembro de 2022.
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

"""Importando as bibliotecas do Python necessárias para fazer o tratamento estatístico do conjunto de dados."""

dados = pd.read_csv('Dataset_limpo.csv', sep='\t')
dados

"""Como iremos usar somente duas colunas do dataset original (Datas e Valores) e o arquivo .csv veio com formatações próprias de planilha do Excel, então fiz a reformatação dos valores e das datas no próprio excel e passei para o notebook apenas os dados já limpos que iremos trabalhar. No meu repositório do Github ficará contido o arquivo original e o reformatado."""

dados.info()

dados['VALOR'].hasnans

dados['VALOR'] = dados['VALOR'].str.replace(',','.')

dados.head()

dados['VALOR'] = pd.to_numeric(dados['VALOR'], downcast='float')

dados

dados['VALOR'].max()

dados['VALOR'].min()

dados.query('VALOR < 0')

"""De 2003 a 2022 tiveram apenas 15 estornos, cujo maior valor é o de R$1380,36."""

dados['VALOR'].max()

dados.query('VALOR > 100000')

"""Por 22 vezes houve gastos maiores do que R$100.000,00 em apenas 1 transação entre o período de 2003 e 2022 no cartão corporativo da Presidência da República."""

dados.query('VALOR > 250000 & VALOR < 350000')

"""Temos 2 ocorrências para valores entre R$250.000 a R$350.000."""

dados.query('VALOR > 150000 & VALOR < 250000')

"""Temos 3 ocorrências para valores entre R$150.000 a R$250.000."""

dados.query('VALOR > 100000 & VALOR < 150000')

"""Temos 17 ocorrências para valores entre R$100.000 a R$150.000."""

dados.query('VALOR > 90000 & VALOR < 100000')

dados.query('VALOR > 80000 & VALOR < 90000').count()

dados.query('VALOR > 70000 & VALOR < 80000').count()

dados.query('VALOR > 60000 & VALOR < 70000').count()

dados.query('VALOR > 50000 & VALOR < 60000').count()

dados.query('VALOR > 40000 & VALOR < 50000').count()

dados.query('VALOR > 30000 & VALOR < 40000').count()

dados.query('VALOR > 20000 & VALOR < 30000').count()

dados.query('VALOR > 10000 & VALOR < 20000').count()

dados.query('VALOR > 1000 & VALOR < 10000').count()

dados.query('VALOR > 0 & VALOR < 1000').count()

dados.query('VALOR > 0 & VALOR < 10').count()

y1 = [2, 3, 17, 2, 10]
x1 = ["> 250000 e < 350000", "> 150000 e < 250000", "> 100000 e < 150000","> 90000 e < 100000","> 80000 e < 90000"]

y2 = [409,1081,17409]
x2 = ["> 30000 e < 40000","> 20000 e < 30000","> 10000 e < 20000"]

y3 = [25,35,69,162]
x3 = ["> 60000 e < 70000","> 50000 e < 60000", " > 40000 e < 50000","> 30000 e < 40000"]

fig, ax = plt.subplots()
ax.barh(x1, y1)
ax.set_fig_size_inches = (20,15)
ax.set_ylabel('Valores em R$', fontsize=16)
ax.set_xlabel('Ocorrências', fontsize=16)
ax.set_title('Gastos com o Cartão Corporativo da Presidência da República', fontsize=20, pad=20)
plt.show()

fig, ax = plt.subplots()
ax.barh(x3, y3)
ax.set_fig_size_inches = (20,15)
ax.set_ylabel('Valores em R$', fontsize=16)
ax.set_xlabel('Ocorrências', fontsize=16)
ax.set_title('Gastos com o Cartão Corporativo da Presidência da República', fontsize=20, pad=20)
plt.show()

fig, ax = plt.subplots()
ax.barh(x2, y2)
ax.set_fig_size_inches = (20,15)
ax.set_ylabel('Valores em R$', fontsize=16)
ax.set_xlabel('Ocorrências', fontsize=16)
ax.set_title('Gastos com o Cartão Corporativo da Presidência da República', fontsize=20, pad=20)
plt.show()

"""# Separando os valores em anos para ajuste de correção monetária."""

dados.info()

type(dados['DATA PGTO'])

dados['DATA PGTO'] = pd.to_datetime(dados['DATA PGTO'])

dados.info()

dados_2003 = pd.DataFrame(dados.loc[(dados['DATA PGTO'] >= '2003-01-01') & (dados['DATA PGTO'] < '2003-12-31')])
dados_2003

!pip install calculadora-do-cidadao

"""Acima instalamos uma biblioteca do Python, disponível no site oficial da linguagem, e com ela faremos nossa correção pela inflação dos valores atuais."""

from datetime import date
from decimal import Decimal
from calculadora_do_cidadao import Ipca

ipca = Ipca()

multiplicador_2003 = float(ipca.adjust(date(2003,1,1)))
multiplicador_2003

dados_2003_corrigidos = dados_2003['VALOR'] * multiplicador_2003
dados_2003_corrigidos

dados_2003['VALOR CORRIGIDO'] = dados_2003_corrigidos
dados_2003

"""Acima adicionados mais uma coluna chamada VALOR CORRIGIDO que comportam os gastos de 2003 corrigidos pelo IPCA à valores atuais. """

dados_2004 = pd.DataFrame(dados.loc[(dados['DATA PGTO'] >= '2004-01-01') & (dados['DATA PGTO'] < '2004-12-31')])
dados_2004

multiplicador_2004 = float(ipca.adjust(date(2004,1,1)))
multiplicador_2004

dados_2004_corrigidos = dados_2004['VALOR'] * multiplicador_2004
dados_2004_corrigidos

dados_2004['VALOR CORRIGIDO'] = dados_2004_corrigidos
dados_2004

"""São 4 passos que precisam ser executados para criar cada dataframe correspondente ao ano que precisa ter os valores corrigidos. Para isso, eu criei uma consulta onde o usuário pode entrar com os dados específicos do períodos que ele quer consultar e obter as respostas."""

def calcula_correcao():
  print('É necessário entrar com a data específica de início e término de cálculo!')
  print('ATENÇÃO! Digite o formato exato da data como YYYY-mm-dd.')
  data_de_inicio = input(print('Entre com a data de início:'))
  data_de_termino = input(print('Entre com a data de termino:'))
  dados_ano = pd.DataFrame(dados.loc[(dados['DATA PGTO'] >= data_de_inicio) & (dados['DATA PGTO'] < data_de_termino)])
  print('Agora entre com os dados de inflação a ser corrigido')
  print('Para o cálculo anual, sugere-se entrar com a data do exercício financeiro')
  ano_inflacao = int(input(print('Entre com o ano:')))
  mes_inflacao = int(input(print('Entre com o mês:')))
  dia_inflacao = int(input(print('Entre com o dia:')))
  multiplicador = float(ipca.adjust(date(ano_inflacao,mes_inflacao,dia_inflacao)))
  dados_corrigidos = dados_ano['VALOR'] * multiplicador
  dados_ano['VALOR CORRIGIDO'] = dados_corrigidos
  return dados_ano

calcula_correcao()

dados_2005 = calcula_correcao()

dados_2005

dados_2006 = calcula_correcao()

dados_2006

dados_2007 = calcula_correcao()

dados_2007

"""# Valor do Primeiro Mandato de Lula - 2003 a 2006
## Valores já corrigidos pela inflação
"""

lula_1_2003 = dados_2003['VALOR CORRIGIDO'].sum()
lula_1_2004 = dados_2004['VALOR CORRIGIDO'].sum()
lula_1_2005 = dados_2005['VALOR CORRIGIDO'].sum()
lula_1_2006 = dados_2006['VALOR CORRIGIDO'].sum()

lula_1 = lula_1_2003 + lula_1_2004 + lula_1_2005 + lula_1_2006
lula_1

"""# Valor do Segundo Mandato de Lula - 2007 a 2010
## Valores já corrigidos pela inflação
"""

dados_2008 = calcula_correcao()

dados_2009 = calcula_correcao()

dados_2010 = calcula_correcao()

lula_2 = dados_2007['VALOR CORRIGIDO'].sum() + dados_2008['VALOR CORRIGIDO'].sum() + dados_2009['VALOR CORRIGIDO'].sum() + dados_2010['VALOR CORRIGIDO'].sum()
lula_2

"""# Valor do Primeiro Mandato de Dilma - 2011 a 2014
## Valores já corrigidos pela inflação
"""

dados_2011 = calcula_correcao()

dados_2012 = calcula_correcao()

dados_2013 = calcula_correcao()

dados_2014 = calcula_correcao()

dilma_1 = dados_2011['VALOR CORRIGIDO'].sum() + dados_2012['VALOR CORRIGIDO'].sum() + dados_2013['VALOR CORRIGIDO'].sum() + dados_2014['VALOR CORRIGIDO'].sum()
dilma_1

"""# Valor do Segundo Mandato de Dilma - 2015 a 2016
## Valores já corrigidos pela inflação
"""

dados_2015 = calcula_correcao()

dados_2016_dilma = calcula_correcao()

dilma_2 = dados_2015['VALOR CORRIGIDO'].sum() + dados_2016_dilma['VALOR CORRIGIDO'].sum()
dilma_2

"""# Valor do Segundo Mandato de Dilma, período Temer - 2016 a 2018
## Valores já corrigidos pela inflação
"""

dados_2016_temer = calcula_correcao()

dados_2017 = calcula_correcao()

dados_2018 = calcula_correcao()

dilma_2_temer = dados_2016_temer['VALOR CORRIGIDO'].sum() + dados_2017['VALOR CORRIGIDO'].sum() + dados_2018['VALOR CORRIGIDO'].sum()

print('Segundo Mandato Dilma 2:', dilma_2)
print('Segundo Mandato Dilma 2, perído Temer:', dilma_2_temer)
print('Somatório de todo o período:', dilma_2 + dilma_2_temer)

"""# Valor do Primeiro Mandato de Bolsonaro - 2019 a 2022
## Valores já corrigidos pela inflação
"""

dados_2019 = calcula_correcao()

dados_2020 = calcula_correcao()

dados_2021 = calcula_correcao()

dados_2022 = calcula_correcao()

bolsonaro_1 = dados_2019['VALOR CORRIGIDO'].sum() + dados_2020['VALOR CORRIGIDO'].sum() + dados_2021['VALOR CORRIGIDO'].sum() + dados_2022['VALOR CORRIGIDO'].sum()
bolsonaro_1

"""# Resultado dos Gastos por mandato dos presidentes"""

print('Primeiro Mandato Lula:', lula_1)
print('Segundo Mandato Lula:', lula_2)
print('Primeiro Mandato Dilma:', dilma_1)
print('Segundo Mandato Dilma:', dilma_2)
print('Segundo Mandato Dilma, período Temer:', dilma_2_temer)
print('Somatório de todo o período do Segundo Mandato Dilma:', dilma_2 + dilma_2_temer)
print('Primeiro Mandato Bolsonaro:', bolsonaro_1)

dilma_2_total = dilma_2 + dilma_2_temer

fig,ax = plt.subplots(figsize=(20,10))

presidentes = ["Lula 1", "Lula 2", "Dilma 1", "Dilma 2 \n(+ Temer)", "Bolsonaro"]
gastos = [lula_1, lula_2,dilma_1,dilma_2_total,bolsonaro_1]
bar_labels = ['red', 'red', 'red', 'orange', 'blue']
bar_colors = ['tab:red', 'tab:red','tab:red','tab:orange', 'tab:blue']

ax.bar(presidentes, gastos, label=bar_labels, color=bar_colors)

ax.set_ylabel('Valores em R$ - milhões', fontsize=20)
ax.set_xlabel('Presidentes', fontsize=20)
ax.set_title('Gastos com Cartão Corporativo da Presidência da República\n>>> corrigidos pela inflação <<<', fontsize=20, pad=20)

gastos

